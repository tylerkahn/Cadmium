#!/bin/bash
CADMIUMROOT=$(dirname $(dirname $(realpath $0)))
ROOTPART=$1

set -e
set -x
set -v

source $CADMIUMROOT/config
source $CADMIUMROOT/board/$TARGET/boardinfo
source $CADMIUMROOT/baseboard/$BASEBOARD/boardinfo

cd $CADMIUMROOT/tmp
mkdir -p root

case "$FILESYSTEM" in
	f2fs)
		mkfs.f2fs -f $ROOTPART
	;;
	ext4)
		mkfs.ext4 -F $ROOTPART
	;;
esac

mount $ROOTPART root

# if we are on arm64 machine, don't use qemu to execute arm64 code
if [ "$(uname -m)" = "$ARCH_UNAME" ]; then
	echo "Running on $ARCH machine"
	foreign=''
else
	case "$ARCH_UNAME" in
		armv7l)
			if [ "$(uname -m)" = "aarch64" ]; then
				echo "Running on arm64 machine capable of executing armv7l programs"
				foreign=''
			fi
		;;
		aarch64)
			cp "$(which qemu-aarch64-static)" root/
			qemu="/qemu-aarch64-static"
			foreign='--foreign'
			echo "Running on not-aarch64 machine"
		;;
		*)
			exit 1
		;;
	esac
fi

cd $CADMIUMROOT/tmp

# rootfs-specific setup
case "$ROOTFS" in
	arch)
		echo "Installing Arch"
		ROOTFS_TAR_GZ="ArchLinuxARM-$ARCH_ARCH-latest.tar.gz"
		if [ ! -f $ROOTFS_TAR_GZ ]; then
			wget http://os.archlinuxarm.org/os/$ROOTFS_TAR_GZ
		fi
		tar xfp $ROOTFS_TAR_GZ -C $CADMIUMROOT/tmp/root
		cp /etc/resolv.conf root/etc/resolv.conf
		arch-chroot root/ /usr/bin/pacman-key --init
		arch-chroot root/ /usr/bin/pacman-key --refresh-keys
		arch-chroot root/ /usr/bin/pacman-key --populate archlinuxarm
		sed -i $CADMIUMROOT/tmp/root/etc/pacman.conf -e s/"#IgnorePkg   ="/"IgnorePkg   = linux-aarch64"/
		arch-chroot root/ /usr/bin/pacman --noconfirm -Syu
		arch-chroot root/ /usr/bin/pacman --noconfirm -S git base vboot-utils networkmanager weston vim f2fs-tools parted
		

	;;
	ubuntu)
		echo "Installing Ubuntu"
		# debootstrap randomly exits with 1, so there's that || true
		debootstrap --components=main,restricted,universe,multiverse --arch=$ARCH_DEB $SUITE $CADMIUMROOT/tmp/root/ http://ports.ubuntu.com/ubuntu-ports/ || true
		# preinstall packages to have wifi
		echo "deb http://ports.ubuntu.com/ubuntu-ports/ $SUITE-updates main restricted universe multiverse" >> $CADMIUMROOT/tmp/root/etc/apt/sources.list
		echo "deb http://ports.ubuntu.com/ubuntu-ports/ $SUITE-security main restricted universe multiverse" >> $CADMIUMROOT/tmp/root/etc/apt/sources.list
		echo "deb http://ports.ubuntu.com/ubuntu-ports/ $SUITE-backports main restricted universe multiverse" >> $CADMIUMROOT/tmp/root/etc/apt/sources.list
		echo "deb http://ports.ubuntu.com/ubuntu-ports/ $SUITE-proposed main restricted universe multiverse" >> $CADMIUMROOT/tmp/root/etc/apt/sources.list
		chroot root/ $qemu /bin/apt update
		#chroot root/ $qemu /bin/apt -y dist-upgrade
		chroot root/ $qemu /bin/apt install -y vim vboot-utils network-manager debootstrap parted f2fs-tools libudev-dev build-essential git firmware-ath9k-htc kmscube weston
	;;
	debian)
		echo "Installing Debian"
		# debootstrap randomly exits with 1, so there's that || true
		# debootstrap --arch=$ARCH_DEB $SUITE $CADMIUMROOT/tmp/root/ https://deb.debian.org/debian/ || true
		debootstrap --arch=$ARCH_DEB $SUITE $CADMIUMROOT/tmp/root/ http://debian.csail.mit.edu/debian/ || true
		# preinstall packages to have wifi
		chroot root/ $qemu /bin/apt update
		chroot root/ $qemu /bin/apt install -y vim vboot-utils network-manager debootstrap parted f2fs-tools libudev-dev build-essential git firmware-ath9k-htc kmscube weston
	;;
	# let's explain this: when void is set, $V is set to -v, so it does 'grep -v musl', printing link without musl
	# when $V is not set, grep is 'grep musl', printing only link with musl
	void)
		V='-v'
	;& # fall-through
	void-musl)
		echo "Installing Void Linux"
		ROOTFS_TAR="$(curl -s -L https://voidlinux.org/download/ | grep $ARCH_UNAME | tr '"' ' ' | awk '{print $3}' | grep $V musl)"
		if [ ! -f "$ROOTFS_TAR" ]; then
			rm void-${ARCH_UNAME}${V}.tar.xz || true
			wget $ROOTFS_TAR -O void-$ARCH_UNAME$V.tar.xz # musl: void-aarch64, non-musl: void-aarch64-v

		fi
		tar xfp void-${ARCH_UNAME}${V}.tar.xz -C $CADMIUMROOT/tmp/root
		cp /etc/resolv.conf root/etc/resolv.conf
		chroot root/ $qemu /bin/xbps-install -Syu xbps
		chroot root/ $qemu /bin/xbps-install -yu
		chroot root/ $qemu /bin/xbps-install -y base-system
		chroot root/ $qemu /bin/xbps-remove -y base-voidstrap
		chroot root/ $qemu /bin/xbps-install -y vim NetworkManager parted f2fs-tools eudev-libudev-devel base-devel git
		cp void-${ARCH_UNAME}${V}.tar.xz root/void.tar.xz
	;;
	ubports)
		echo "Installing UBports"
		wget https://ci.ubports.com/job/xenial-mainline-edge-rootfs-$ARCH_DEB/lastSuccessfulBuild/artifact/out/ubuntu-touch-xenial-edge-$ARCH_DEB-rootfs.tar.gz
		tar xfp ubuntu-touch-xenial-edge-$ARCH_DEB-rootfs.tar.gz -C $CADMIUMROOT/tmp/root
	;;
esac

# remove root password, this is install medium so it's ok, not needed in ubports
[ ! "$ROOTFS" = "ubports" ] && chroot root/ $qemu /bin/passwd -d root

echo $BASEBOARD > root/etc/hostname # set default hostname in kernel?

# workaround bad touchpad experience on certain boards
mkdir -p $CADMIUMROOT/tmp/root/etc/libinput
[ -f $CADMIUMROOT/board/$TARGET/libinput-quirk ] && cp $CADMIUMROOT/board/$TARGET/libinput-quirk root/etc/libinput/local-overrides.quirks

# copy iio sensor proxy accel file
[ -f $CADMIUMROOT/board/$TARGET/accel-matrix.hwdb ] && cp $CADMIUMROOT/board/$TARGET/accel-matrix.hwdb root/

# copy over firmware if not libre
if [ $KERNEL != libre ]; then
	mkdir -p $CADMIUMROOT/tmp/root/lib/firmware
	cp -r $CADMIUMROOT/baseboard/$BASEBOARD/firmware/* $CADMIUMROOT/tmp/root/lib/firmware/
	[ -d $CADMIUMROOT/board/$TARGET/firmware/ ] && cp -r $CADMIUMROOT/board/$TARGET/firmware/* $CADMIUMROOT/tmp/root/lib/firmware/
fi

# make cadmium dir for future scripts lolol
mkdir $CADMIUMROOT/tmp/root/CdFiles

# copy over Important Stuff (tm)
cp -r $CADMIUMROOT/fs/CdFiles/* $CADMIUMROOT/tmp/root/CdFiles/

# install qcom binaries for lazor
# TODO: trogdor units with lte modem probably wont work
mkdir -p $CADMIUMROOT/tmp/root/lib/firmware/rmtfs
dd if=/dev/zero bs=1M count=2 of=$CADMIUMROOT/tmp/root/lib/firmware/rmtfs/modem_fs1
dd if=/dev/zero bs=1M count=2 of=$CADMIUMROOT/tmp/root/lib/firmware/rmtfs/modem_fs2
dd if=/dev/zero bs=1M count=2 of=$CADMIUMROOT/tmp/root/lib/firmware/rmtfs/modem_fsg
dd if=/dev/zero bs=1M count=2 of=$CADMIUMROOT/tmp/root/lib/firmware/rmtfs/modem_fsc

git clone https://github.com/andersson/qmic.git $CADMIUMROOT/tmp/root/CdFiles/qmic
git clone https://github.com/andersson/qrtr.git $CADMIUMROOT/tmp/root/CdFiles/qrtr
git clone https://github.com/Maccraft123/rmtfs.git $CADMIUMROOT/tmp/root/CdFiles/rmtfs

# install sway config to user dir
mkdir -p $CADMIUMROOT/tmp/root/etc/sway
cp $CADMIUMROOT/board/$TARGET/sway-config $CADMIUMROOT/tmp/root/root/swayconfig

# copy over ucm files
mkdir $CADMIUMROOT/tmp/root/ucm
if ls $CADMIUMROOT/board/$TARGET/ucm; then
	cp -r $CADMIUMROOT/board/$TARGET/ucm/* $CADMIUMROOT/tmp/root/usr/share/alsa/ucm2/
	cp -r $CADMIUMROOT/board/$TARGET/ucm/* $CADMIUMROOT/tmp/root/ucm/
fi

# copy installation scripts if not ubports, double root is not a typo
if [ ! "$ROOTFS" = "ubports" ]; then
	# -begin sets up partition and fs, -middle installs distro, -end sets up distro
	[ "$ROOTFS" = "void-musl" ] && export ROOTFS=void # those 2 are the same in cadmium
	cat $CADMIUMROOT/fs/install-to-emmc-begin $CADMIUMROOT/fs/$ROOTFS/install-to-emmc-middle $CADMIUMROOT/fs/install-to-emmc-end > root/root/install-to-emmc
	chmod a+x root/root/install-to-emmc

	cp $CADMIUMROOT/fs/install-to-here $CADMIUMROOT/tmp/root/root/install-to-here
	chmod a+x $CADMIUMROOT/tmp/root/root/install-to-here
fi

# copy config, boardinfo and baseboard info over
cat $CADMIUMROOT/config $CADMIUMROOT/board/$TARGET/boardinfo $CADMIUMROOT/baseboard/$BASEBOARD/boardinfo > root/root/info

# copy over ui installer settings
cp -r $CADMIUMROOT/ui root/root/ui
chmod a+x root/root/ui/install

# !!!!!!
# NOTE:
# oxide kpart is copied in build-all

#umount root # done in /build-all
